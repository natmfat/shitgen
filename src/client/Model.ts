import { sql } from "./sql";
import { OneOf, IsNotNullable, Nullable, Defined } from "../types";
import { MockColumn, MockDatabase } from "../MockDatabase";
import assert from "assert";

/** ReturnType of sql templating function */
type SqlFragment = ReturnType<typeof sql>;

type BaseData = Record<string, unknown>;

/**
 * A type indicating which of Data's keys are actually foreign relationships to another model
 * @example
 * type UserData = {
 *   avatar_id: number
 * }
 *
 * type UserRelationship = {
 *   avatar_id: AvatarData
 * }
 */
type BaseRelationship<Data extends BaseData> = Partial<
  Record<keyof Data, BaseData>
>;

/**
 * Is the field allowed to be null? \
 * "NonNull" indicates that NOT NULL was specified in the schema
 */
type NonNullValue<NonNull extends true | false, value> = NonNull extends true
  ? value
  : value | null;

// @todo order desc/asc

type WhereOperatorString<NonNull extends true | false> =
  | OneOf<{
      eq: NonNullValue<NonNull, string>;
      neq: NonNullValue<NonNull, string>;
      contains: string;
      endsWith: string;
      startsWith: string;
    }>
  | NonNullValue<NonNull, string>;

type WhereOperatorNumber<NonNull extends true | false> =
  | OneOf<{
      eq: NonNullValue<NonNull, number>;
      neq: NonNullValue<NonNull, number>;
      gt: number;
      lt: number;
      gte: number;
      lte: number;
      // @todo between?
    }>
  | NonNullValue<NonNull, number>;

type WhereOperatorBoolean<NonNull extends true | false> =
  | OneOf<{
      eq: NonNullValue<NonNull, boolean>;
      neq: NonNullValue<NonNull, boolean>;
    }>
  | NonNullValue<NonNull, boolean>;

// this "maps" a type of a value of Data to a the corresponding operators
// prettier-ignore
type WhereOperatorMap<Value> = NonNullable<Value> extends string
  ? WhereOperatorString<IsNotNullable<Value>>
  : NonNullable<Value> extends number
    ? WhereOperatorNumber<IsNotNullable<Value>>
    : NonNullable<Value> extends boolean
      ? WhereOperatorBoolean<IsNotNullable<Value>>
      : never;

type WhereOperator<
  Data extends BaseData,
  Relationship extends BaseRelationship<Data>
> = Partial<{
  [Key in keyof Data]: Partial<WhereOperatorMap<Data[Key]>>;
}> &
  Partial<{
    [Key in keyof Data]:
      | Partial<WhereOperatorMap<Data[Key]>>
      | (Key extends keyof Relationship
          ?
              | Data[Key]
              | Partial<{
                  [SubKey in keyof Relationship[Key]]: WhereOperatorMap<
                    Relationship[Key][SubKey]
                  >;
                }>
          : never);
  }>;

// @todo more than 1 relationship deep -> recursive types (use WhereOperator<value, value> if extends?)

type IncludeOperator<
  Data extends BaseData,
  Relationship extends BaseRelationship<Data>
> = Partial<{
  [Key in keyof Relationship]:
    | boolean
    | Partial<{
        [SubKey in keyof Relationship[Key]]: boolean;
      }>;
}>;

// prettier-ignore
type IncludeOperatorResult<
  Data extends BaseData,
  Relationship extends BaseRelationship<Data>,
  Include extends IncludeOperator<Data, Relationship>
> = {
  [Key in keyof Include]: Include[Key] extends boolean
    ? Key extends keyof Relationship
      ? Relationship[Key]
      : never
    : Include[Key] extends Partial<Record<infer SubKey, boolean>>
      ? Key extends keyof Relationship
        ? Pick<Relationship[Key], Extract<keyof Relationship[Key], SubKey>>
        : never
      : never;
};

// METHOD ARGUMENTS & RETURN TYPES

// DataArg is what's used in queries
// it excludes autogenerated keys & makes default values optional
// BaseData is UserData, no adjustments made
type DataArg<
  ModelData extends Record<string, unknown>,
  ModelAutoGenerated extends keyof ModelData,
  ModelOptional extends keyof ModelData
> = Omit<ModelData, ModelAutoGenerated | ModelOptional> &
  Partial<Pick<ModelData, ModelOptional>>;

export class Model<
  ModelData extends Record<string, unknown>,
  ModelAutoGenerated extends keyof ModelData,
  ModelOptional extends keyof ModelData,
  ModelRelationship extends BaseRelationship<ModelData>
> {
  constructor(private tableName: string, private database: MockDatabase) {}

  private createIdentifier(
    column: string,
    parentTable: string = this.tableName
  ) {
    // @todo wrap in sql()
    // will require rewriting generate where
    return sql(`${parentTable}.${column}`);
  }

  private generateSelect({
    select,
    parentTable = this.tableName,
    referenceColumnName,
    includeReturning = false,

    includeComma = false,
  }: {
    // columns that we are selecting from the table
    select: Array<keyof ModelData>;
    // table that the columns belong to
    parentTable?: string;
    // if provided, alias the column into __referenceColumnName__column
    // where column is a key of select
    referenceColumnName?: string;
    // should we prefix the select statement with RETURNING
    includeReturning?: boolean;
    // if there are more select statements later on, this will add a comma at the end
    includeComma?: boolean;
  }): SqlFragment {
    const columns =
      select.length > 0
        ? select.map(
            (column, i) =>
              sql`${this.createIdentifier(String(column), parentTable)} ${
                referenceColumnName
                  ? sql`AS ${sql(
                      `__${referenceColumnName}__${String(column)}`
                    )} ${i !== select.length - 1 ? sql`,` : sql``}`
                  : sql``
              }`
          )
        : sql`${sql(parentTable)}.*`;

    // @todo maybe use sql`${this.tableName}*` ??

    // @todo do not use * with include (pass include selects into here)

    return sql`${includeReturning ? sql`RETURNING` : sql``} ${columns}${
      includeComma ? sql`,` : sql``
    }`;
  }

  /**
   * Given an array of sql statements, return an empty sql string or the array \
   * If you provide sql`[]` (where fragment is an empty array) unexpected things happen, so we force it into sql`` instead
   * @param fragment Array of sql statements that could be empty
   * @returns A non-empty array of sql statements OR an empty sql string
   */
  private emptyFragmentArray(fragment: SqlFragment[]) {
    return fragment.length === 0 ? sql`` : fragment;
  }

  private findReference(
    columnName: string,
    parentTable: string = this.tableName
  ) {
    const column = this.database.getTable(parentTable).getColumn(columnName);
    assert(
      column,
      `expected to find column "${columnName}" in table "${parentTable}"`
    );
    assert(
      column.reference,
      `expected column "${columnName}" in table "${parentTable}" to have a reference`
    );

    // @todo utility type: WellDefined?
    return column as Defined<MockColumn, "reference">;
  }

  private generateInclude(
    include: IncludeOperator<ModelData, ModelRelationship>
  ) {
    const joinFragment: SqlFragment[] = [];
    const selectFragment: SqlFragment[] = [];

    for (const [columnName, select] of Object.entries(include)) {
      const column = this.findReference(columnName);

      joinFragment.push(
        sql`JOIN ${sql(column.reference.tableName)} ON ${this.createIdentifier(
          column.name
        )} = ${this.createIdentifier(
          column.reference.columnName,
          column.reference.tableName
        )}`
      );
      if (typeof select !== "boolean") {
        selectFragment.push(
          this.generateSelect({
            select: Object.keys(select),
            parentTable: column.reference.tableName,
            referenceColumnName: columnName,
          })
        );
      }
    }

    return {
      joinFragment: joinFragment,
      selectFragment: selectFragment,
    };
  }

  private generateWhereObject(
    key: string,
    operators: unknown,
    parentTable: string = this.tableName
  ): SqlFragment {
    const selector = this.createIdentifier(key, parentTable);
    if (operators === null) {
      return sql`${selector} IS NULL`;
    } else if (operators && typeof operators === "object") {
      // @todo pass parameter before making reference checks? error handling like this seems kind of pythonic
      let column: Nullable<Defined<MockColumn, "reference">> = null;
      try {
        column = this.findReference(key, parentTable);
      } catch (error) {}
      if (column) {
        return this.generateWhere({
          where: operators as any,
          parentTable: column.reference.tableName,
          includeWhere: false,
        });
      }

      const [operator, targetValue] = Object.entries(operators)[0];
      switch (operator) {
        case "eq":
          return targetValue === null
            ? sql`${selector} IS NULL`
            : sql`${selector} = '${targetValue}'`;
        case "neq":
          return targetValue === null
            ? sql`${selector} IS NOT NULL`
            : sql`${selector} != '${targetValue}'`;
        case "contains":
          return sql`${selector} LIKE '%${targetValue}%'`;
        case "startsWith":
          return sql`${selector} LIKE '${targetValue}%'`;
        case "endsWith":
          return sql`${selector} LIKE '%${targetValue}'`;
        case "gt":
          return sql`${selector} > ${targetValue}`;
        case "lt":
          return sql`${selector} < ${targetValue}`;
        case "gte":
          return sql`${selector} >= ${targetValue}`;
        case "lte":
          return sql`${selector} >= ${targetValue}`;
      }
    }

    return sql`${selector} = ${String(operators)}`;
  }

  // @todo use object for args, like generateSelect
  private generateWhere<
    WhereData extends Record<string, unknown>,
    WhereRelationship extends BaseRelationship<WhereData>
  >({
    where,
    parentTable = this.tableName,
    includeWhere = true,
  }: {
    where: WhereOperator<WhereData, WhereRelationship>;
    parentTable?: string;
    /**
     * should we prefix the where statement with WHERE
     * this only occurs IF the where operator produces a meaningful result
     */
    includeWhere?: boolean;
  }): SqlFragment {
    // @todo very bad using unsafe (idk sql injections ok), fix that

    const whereFragments: SqlFragment[] = [];
    const whereEntries = Object.entries(where);
    whereEntries.forEach(([key, operators], i) => {
      whereFragments.push(
        this.generateWhereObject(key, operators, parentTable)
      );
      if (i !== whereEntries.length - 1) {
        whereFragments.push(sql`AND`);
      }
    });

    return sql`${
      includeWhere && whereFragments.length > 0 ? sql`WHERE` : sql``
    } ${this.emptyFragmentArray(whereFragments)}`;
  }

  async find<
    SelectKey extends keyof ModelData,
    ResolvedIncludeOperator extends IncludeOperator<
      ModelData,
      ModelRelationship
    >
  >(args: {
    select?: Array<SelectKey>;
    where?: WhereOperator<ModelData, ModelRelationship>;
    include?: ResolvedIncludeOperator;
    limit?: number;
  }) {
    const data = await this.findMany({ ...args, limit: 1 });
    return data.length === 1 ? data[0] : null;
  }

  /**
   * Properly format row into its expected type
   * @param rowSource Row returned from postgres querys
   * @returns Properly formatted row (must be typed later)
   *
   * @example
   * formatRow({
   *   id: '1393ca77-391a-4cb7-9aca-4c9a905fc3fa',
   *   palette_id: '2',
   *  __palette_id_id: '2',
   *   __palette_id_thumbnail_colors: [ '#0e1525', '#1c2333', '#0053a6', '#0079f2' ]
   * })
   * // this will produce the object
   * // this will correspond to our later type casts
   * {
   *   id: '1393ca77-391a-4cb7-9aca-4c9a905fc3fa',
   *   palette_id: {
   *     id: '2',
   *     thumbnail_colors: [ '#0e1525', '#1c2333', '#0053a6', '#0079f2' ]
   *   }
   * }
   */
  private formatRow(rowSource: Record<string, unknown>) {
    // make a copy cause immutable data & pure functions or whatever
    const row = { ...rowSource };
    for (const key of Object.keys(row)) {
      // if starts with __, like __palette_id__thumbnail_colors
      // we should remove it & add all keys to palette_id
      if (key.startsWith("__")) {
        const cachedValue = row[key];
        delete row[key];
        const [referenceColumnName, subKey] = key
          .split("__")
          .map((row) => row.trim())
          .filter((row) => row.length > 0) as [keyof typeof row, string];
        row[referenceColumnName] = {
          ...(typeof row[referenceColumnName] === "object"
            ? row[referenceColumnName]
            : {}),
          [subKey]: cachedValue,
        };
      }
    }
    return row;
  }

  async findMany<
    SelectKey extends keyof ModelData,
    ResolvedIncludeOperator extends IncludeOperator<
      ModelData,
      ModelRelationship
    >
  >({
    select = [],
    where = {},
    include,
    limit,
  }: {
    select?: Array<SelectKey>;
    where?: WhereOperator<ModelData, ModelRelationship>;
    include?: ResolvedIncludeOperator;
    limit?: number;
  }) {
    const { joinFragment, selectFragment: includeSelectFragment } =
      this.generateInclude(include || {});
    // @todo generateSelect should accept and object instead to keep default values

    const rows = await sql`
      SELECT ${this.generateSelect({
        select,
        includeComma: includeSelectFragment.length > 0,
      })} ${this.emptyFragmentArray(includeSelectFragment)} FROM ${sql(
      this.tableName
    )}
      ${this.emptyFragmentArray(joinFragment)}
      ${this.generateWhere({ where })}
      ${limit ? sql`LIMIT ${limit}` : sql``}
    `;

    return rows.map(
      (row) =>
        this.formatRow(row) as Pick<ModelData, SelectKey> &
          IncludeOperatorResult<
            ModelData,
            ModelRelationship,
            ResolvedIncludeOperator
          >
    );
  }

  async create<SelectKey extends keyof ModelData>({
    select = [],
    data,
  }: {
    select?: Array<SelectKey>;
    data: DataArg<ModelData, ModelAutoGenerated, ModelOptional>;
  }) {
    const rows = await sql`
      INSERT INTO ${sql(this.tableName)} 
      ${sql(data as any, Object.keys(data))}
      ${this.generateSelect({ select, includeReturning: true })}
    `;
    assert(rows.length === 1, "expected to create a single row");
    return rows[0] as Pick<ModelData, SelectKey>;
  }

  async update<SelectKey extends keyof ModelData>({
    select = [],
    data,
    where,
  }: {
    select?: Array<SelectKey>;
    data: Partial<ModelData>;
    where: WhereOperator<ModelData, ModelRelationship>;
  }) {
    const rows = await sql`
      UPDATE ${sql(this.tableName)} SET ${sql(data as any, Object.keys(data))}
      ${this.generateWhere({ where })}
      ${this.generateSelect({ select, includeReturning: true })}
    `;
    assert(rows.length === 1, "expected to update a single row");
    return rows[0] as Pick<ModelData, SelectKey>;
  }

  async delete({
    where,
  }: {
    where: WhereOperator<ModelData, ModelRelationship>;
  }) {
    return sql`
      DELETE FROM ${sql(this.tableName)} 
      ${this.generateWhere({ where })}
    `;
  }
}
